import os
import yaml
import pandas as pd
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_experimental.agents import create_pandas_dataframe_agent

def load_config(file_path='config.yaml'):
    with open(file_path, 'r') as file:
        config = yaml.safe_load(file)
        for key, value in config.items():
            os.environ[key] = value

load_config()

def initialize_agent():
    llm = ChatGoogleGenerativeAI(
        google_api_key=os.environ["GEM_KEY"],
        model="gemini-1.5-pro-002",
        temperature=0
    )
    
    print("Loading CSV files...")
    csv_files = [file for file in os.listdir("./all_csvs") if file.endswith('.csv')]
    dataframes = []
    for file in csv_files:
        path = f"./all_csvs/{file}"
        print(path)
        df = pd.read_csv(path)
        print('accessed')
        dataframes.append(df)
    
    return create_pandas_dataframe_agent(
        llm,
        dataframes,
        verbose=True,
        allow_dangerous_code=True
    )

def query_transactions(question: str) -> str:
    agent = initialize_agent()
    response = agent.invoke({"input": question})
    return response['output']

def generate_detailed_report() -> str:
    agent = initialize_agent()
    report_prompt =  """Analyze the transaction records in the provided dataframes. Use the raw data to provide insights, without making assumptions beyond the given data. If specific details cannot be determined due to insufficient data, mention this explicitly. Address the following sections in detail:

1. **INCOME PATTERNS**
   - Analyze credit transactions: their frequency, consistency, and sources.
   - Provide average monthly inflow amounts (if credits exist).

2. **SPENDING BEHAVIOR**
   - Break down debits by categories and recipients.
   - Highlight recurring payments and patterns.
   - Identify trends in essential vs. discretionary spending (if categories allow differentiation).

3. **FINANCIAL MANAGEMENT**
   - Assess cash flow patterns and trends in balance maintenance.
   - Indicate potential savings or investments if any records hint at them.

4. **TRANSACTION RELIABILITY**
   - Analyze payment consistency and transaction success rates.
   - Mention any notable recurring or EMI-related payments.

5. **OVERALL FINANCIAL PROFILE**
   - Summarize key strengths and areas needing attention.
   - Provide any month-on-month trends visible in the data.

Include specific details like counts, percentages, or averages from the CSVs. Avoid processing or transforming date strings beyond their raw representation.."""
    
    response = agent.invoke({"input": report_prompt})
    return response['output']

from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

def convert_text_to_pdf_beautified(text, output_file):
    # Get the sample styles and create custom styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        name="Title",
        parent=styles["Title"],
        fontSize=24,
        textColor=colors.darkblue,
        alignment=1,  # Center alignment
    )
    body_style = ParagraphStyle(
        name="Body",
        parent=styles["BodyText"],
        fontSize=12,
        leading=15,  # Line spacing
    )
    
    footer_style = ParagraphStyle(
        name="Footer",
        fontSize=10,
        textColor=colors.gray,
        alignment=1,  # Center alignment
    )

    # Create the PDF document
    doc = SimpleDocTemplate(output_file, pagesize=letter)
    elements = []

    # Add a title
    elements.append(Paragraph("Transaction Analysis Document", title_style))
    elements.append(Spacer(1, 20))  # Add some space after the title

    # Add the text as paragraphs
    paragraphs = text.split("\n")  # Split text into paragraphs
    for para in paragraphs:
        elements.append(Paragraph(para, body_style))
        elements.append(Spacer(1, 12))  # Add space between paragraphs

    # Add a footer
    elements.append(PageBreak())  # Add a page break for footer if needed
    elements.append(Paragraph("Generated by UDAN", footer_style))

    # Build the PDF
    doc.build(elements)

# Example usage
text = """
This is a beautified PDF document example.
It contains a title, styled text, and better formatting.
You can use this as a template for creating polished PDF documents.
Enjoy creating PDFs with ReportLab!
"""
output_file = "beautified_output.pdf"

convert_text_to_pdf_beautified(text, output_file)
print(f"PDF created: {output_file}")